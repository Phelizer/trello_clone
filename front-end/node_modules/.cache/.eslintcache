[{"/home/alex/trello_clone123/front-end/src/index.jsx":"1","/home/alex/trello_clone123/front-end/src/reportWebVitals.js":"2","/home/alex/trello_clone123/front-end/src/App.jsx":"3","/home/alex/trello_clone123/front-end/src/CookiesContext.jsx":"4","/home/alex/trello_clone123/front-end/src/Authorization/AuthPage.jsx":"5","/home/alex/trello_clone123/front-end/src/Board CRUD component/BoardManager.jsx":"6","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/TaskManager.jsx":"7","/home/alex/trello_clone123/front-end/src/Board CRUD component/Board.jsx":"8","/home/alex/trello_clone123/front-end/src/Board CRUD component/AddBoardButton.jsx":"9","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/AddSectionButton.jsx":"10","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/Section.jsx":"11","/home/alex/trello_clone123/front-end/src/Utils/Utils.jsx":"12","/home/alex/trello_clone123/front-end/src/Board CRUD component/DeleteBoardButton.jsx":"13","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/Task.jsx":"14","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/DeleteSectionButton.jsx":"15","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/AddTaskButton.jsx":"16","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/DeleteTaskButton.jsx":"17","/home/alex/trello_clone123/front-end/src/BoardScreen.jsx":"18","/home/alex/trello_clone123/front-end/src/Teams/TeamManager.jsx":"19","/home/alex/trello_clone123/front-end/src/data.js":"20","/home/alex/trello_clone123/front-end/src/Teams/Team.jsx":"21","/home/alex/trello_clone123/front-end/src/Teams/DeleteTeamButton.jsx":"22","/home/alex/trello_clone123/front-end/src/CurrentTeamContext.jsx":"23"},{"size":595,"mtime":1619438355070,"results":"24","hashOfConfig":"25"},{"size":364,"mtime":1619438355070,"results":"26","hashOfConfig":"25"},{"size":908,"mtime":1619986999471,"results":"27","hashOfConfig":"25"},{"size":474,"mtime":1619986644127,"results":"28","hashOfConfig":"25"},{"size":1673,"mtime":1619987199816,"results":"29","hashOfConfig":"25"},{"size":719,"mtime":1620410344149,"results":"30","hashOfConfig":"25"},{"size":3891,"mtime":1620410513202,"results":"31","hashOfConfig":"25"},{"size":780,"mtime":1620133764343,"results":"32","hashOfConfig":"25"},{"size":1771,"mtime":1620133550597,"results":"33","hashOfConfig":"25"},{"size":1296,"mtime":1619438355070,"results":"34","hashOfConfig":"25"},{"size":2406,"mtime":1620409490208,"results":"35","hashOfConfig":"25"},{"size":275,"mtime":1619438355070,"results":"36","hashOfConfig":"25"},{"size":1828,"mtime":1620133659629,"results":"37","hashOfConfig":"25"},{"size":1257,"mtime":1620409491764,"results":"38","hashOfConfig":"25"},{"size":1529,"mtime":1619438355070,"results":"39","hashOfConfig":"25"},{"size":1168,"mtime":1619438355070,"results":"40","hashOfConfig":"25"},{"size":1466,"mtime":1619438355070,"results":"41","hashOfConfig":"25"},{"size":2617,"mtime":1620133449347,"results":"42","hashOfConfig":"25"},{"size":757,"mtime":1619975860789,"results":"43","hashOfConfig":"25"},{"size":556,"mtime":1619708640024,"results":"44","hashOfConfig":"25"},{"size":1035,"mtime":1620117511165,"results":"45","hashOfConfig":"25"},{"size":384,"mtime":1619983266058,"results":"46","hashOfConfig":"25"},{"size":442,"mtime":1619986943829,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"gd81r",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"/home/alex/trello_clone123/front-end/src/index.jsx",[],["104","105","106","107","108","109","110"],"/home/alex/trello_clone123/front-end/src/reportWebVitals.js",[],"/home/alex/trello_clone123/front-end/src/App.jsx",["111"],"import \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport AuthPage from \"./Authorization/AuthPage\";\nimport BoardManager from \"./Board CRUD component/BoardManager\";\nimport TaskManager from \"./Sections and cards CRUD component/TaskManager\";\nimport { CookieProvider } from \"./CookiesContext\";\nimport BoardScreen from \"./BoardScreen\";\nimport { CurrentTeamProvider } from \"./CurrentTeamContext\";\n\nfunction App() {\n  return (\n    <CurrentTeamProvider>\n      <CookieProvider>\n        <Router>\n          <div className=\"App\">\n            <Switch>\n              <Route path=\"/\" exact component={AuthPage} />\n              <Route path=\"/boards\" exact component={BoardScreen} />\n              <Route path=\"/:id\" component={TaskManager} />\n            </Switch>\n          </div>\n        </Router>\n      </CookieProvider>\n    </CurrentTeamProvider>\n  );\n}\n\nexport default App;\n","/home/alex/trello_clone123/front-end/src/CookiesContext.jsx",[],"/home/alex/trello_clone123/front-end/src/Authorization/AuthPage.jsx",["112"],"import { useState, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { CookieContext } from \"../CookiesContext\";\n\nconst AuthPage = () => {\n  const [currLogin, setCurrLogin] = useState(null);\n  const [currPassword, setCurrPassword] = useState(null);\n\n  const [cookies, setCookie] = useContext(CookieContext);\n  const history = useHistory();\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    const url = \"http://localhost:3000/auth/login\";\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        username: currLogin,\n        password: currPassword,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        const JWT = result.access_token;\n        setCookie(\"JWT\", JWT, { path: \"/\" });\n        history.push(\"/boards\");\n      });\n  };\n  const loginChangeHandler = (e) => {\n    setCurrLogin(e.target.value);\n  };\n  const passwordChangeHandler = (e) => {\n    setCurrPassword(e.target.value);\n  };\n  return (\n    <div className=\"AuthPage\">\n      <form onSubmit={submitHandler}>\n        <label htmlFor=\"login\">\n          Login:\n          <input\n            type=\"text\"\n            name=\"login\"\n            id=\"login\"\n            onChange={loginChangeHandler}\n          />\n        </label>\n        <label htmlFor=\"password\">\n          Password:\n          <input\n            type=\"text\"\n            name=\"password\"\n            id=\"password\"\n            onChange={passwordChangeHandler}\n          />\n        </label>\n        <input type=\"submit\" value=\"Sign in\" />\n      </form>\n    </div>\n  );\n};\n\nexport default AuthPage;\n","/home/alex/trello_clone123/front-end/src/Board CRUD component/BoardManager.jsx",[],"/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/TaskManager.jsx",[],"/home/alex/trello_clone123/front-end/src/Board CRUD component/Board.jsx",[],"/home/alex/trello_clone123/front-end/src/Board CRUD component/AddBoardButton.jsx",["113","114"],"import PropTypes from \"prop-types\";\nimport \"./AddBoardButton.css\";\nimport { useContext } from \"react\";\nimport { CookieContext } from \"../CookiesContext\";\nimport { CurrentTeamContext } from \"../CurrentTeamContext\";\n\nfunction AddBoardButton({ setBoards, setAllBoards }) {\n  const [cookies] = useContext(CookieContext);\n  const [currTeamID] = useContext(CurrentTeamContext);\n  const handleClick = () => {\n    // to be changed:\n    let boardName = prompt(\"Input board name\", \"New board\");\n\n    // if user cancel the prompt, we cancel the handleClick()\n    if (boardName === null) return;\n\n    // if user tries to input an empty name\n    // we ask to redo the name\n    while (boardName === \"\") {\n      boardName = prompt(\n        \"Board name shouldn't be empty. Please, re-enter the board name\",\n        \"New board\"\n      );\n\n      // if user cancel the prompt, we cancel the handleClick()\n      if (boardName === null) return;\n    }\n\n    const url = \"http://localhost:3000/boards\";\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: boardName,\n        team_id: currTeamID,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${cookies.JWT}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        setAllBoards(result);\n        const newBoards = result.filter(\n          (board) => board.team_id === currTeamID\n        );\n        setBoards(newBoards);\n      });\n  };\n\n  return (\n    <div className=\"AddBoardButton\">\n      <button type=\"button\" onClick={handleClick}>\n        Add board\n      </button>\n    </div>\n  );\n}\n\nAddBoardButton.propTypes = {\n  setBoards: PropTypes.func.isRequired,\n  setAllBoards: PropTypes.func.isRequired,\n};\n\nexport default AddBoardButton;\n","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/AddSectionButton.jsx",["115"],"import PropTypes from \"prop-types\";\n// import \"./AddSectionButton.css\";\nimport { useContext } from \"react\";\nimport { getPath } from \"../Utils/Utils\";\nimport { CookieContext } from \"../CookiesContext\";\n\nfunction AddSectionButton({ setSections }) {\n  const [cookies] = useContext(CookieContext);\n\n  const handleClick = () => {\n    const sectionName = prompt(\"Input section name\", \"New section\");\n\n    // get array of path elements\n    const path = getPath(window);\n\n    const url = `http://localhost:3000/board/${path[0]}`;\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: sectionName,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${cookies.JWT}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        setSections(result);\n      });\n  };\n\n  return (\n    <div className=\"AddSectionButton\">\n      <button type=\"button\" onClick={handleClick}>\n        Add section\n      </button>\n    </div>\n  );\n}\n\nAddSectionButton.propTypes = {\n  /* sections: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.number,\n      position: PropTypes.number,\n    })\n  ).isRequired, */\n  setSections: PropTypes.func.isRequired,\n};\n\nexport default AddSectionButton;\n","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/Section.jsx",[],"/home/alex/trello_clone123/front-end/src/Utils/Utils.jsx",[],"/home/alex/trello_clone123/front-end/src/Board CRUD component/DeleteBoardButton.jsx",["116"],"import PropTypes from \"prop-types\";\nimport \"./DeleteBoardButton.css\";\nimport { useContext } from \"react\";\nimport { CookieContext } from \"../CookiesContext\";\nimport { CurrentTeamContext } from \"../CurrentTeamContext\";\n\nfunction DeleteBoardButton({ boardID, boards, setBoards, setAllBoards }) {\n  const [cookies] = useContext(CookieContext);\n  const [currTeamID] = useContext(CurrentTeamContext);\n\n  const handleClick = () => {\n    const url = `http://localhost:3000/boards/${boardID}`;\n    fetch(url, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${cookies.JWT}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        if (result.error) {\n          // if there is already no board with that id on server side\n          // than we simply delete it from client's state\n          console.log(\"Error\");\n          const updatedState = boards.filter((board) => board.id !== boardID);\n          setBoards(updatedState);\n          return;\n        }\n        // if everything is ok and there is a board\n        // that we want to remove on server side\n        // than we set new state to BoardManager with\n        // all the rest boards\n        setAllBoards(result);\n        const newBoards = result.filter(\n          (board) => board.team_id === currTeamID\n        );\n        setBoards(newBoards);\n      });\n    // TODO: fetch error handling to be done\n  };\n  return (\n    <div className=\"DeleteBoardButton\">\n      <button type=\"button\" className=\"DeleteButton\" onClick={handleClick}>\n        ×\n      </button>\n    </div>\n  );\n}\n\nDeleteBoardButton.propTypes = {\n  boardID: PropTypes.number.isRequired,\n  boards: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setBoards: PropTypes.func.isRequired,\n  setAllBoards: PropTypes.func.isRequired,\n};\n\nexport default DeleteBoardButton;\n","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/Task.jsx",[],"/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/DeleteSectionButton.jsx",[],"/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/AddTaskButton.jsx",["117"],"import PropTypes from \"prop-types\";\nimport { useContext } from \"react\";\nimport { getPath } from \"../Utils/Utils\";\nimport { CookieContext } from \"../CookiesContext\";\n\nconst AddTaskButton = ({ setTasks, sectionID }) => {\n  const [cookies] = useContext(CookieContext);\n\n  const handleClick = () => {\n    const taskName = prompt(\"Input task\");\n\n    // get array of path elements\n    const path = getPath(window);\n\n    const url = `http://localhost:3000/task/${path[0]}/${sectionID}`;\n\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: taskName,\n        priority: 0,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${cookies.JWT}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        setTasks(result);\n      });\n  };\n\n  return (\n    <div className=\"AddTaskButton\">\n      <button type=\"button\" onClick={handleClick}>\n        Add task\n      </button>\n    </div>\n  );\n};\n\nAddTaskButton.propTypes = {\n  sectionID: PropTypes.number.isRequired,\n  setTasks: PropTypes.func.isRequired,\n  //   setTasks: PropTypes.func.isRequired,\n};\n\nexport default AddTaskButton;\n","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/DeleteTaskButton.jsx",[],"/home/alex/trello_clone123/front-end/src/BoardScreen.jsx",["118","119"],"import { useEffect, useState, useContext } from \"react\";\nimport BoardManager from \"./Board CRUD component/BoardManager\";\nimport TeamManager from \"./Teams/TeamManager\";\nimport { CookieContext } from \"./CookiesContext\";\nimport { CurrentTeamContext } from \"./CurrentTeamContext\";\n\nconst BoardScreen = () => {\n  // needed for fetch error handling\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  // allBoards is a list of boards,\n  // which should be fetched from the server\n  const [allBoards, setAllBoards] = useState([]);\n  const [boards, setBoards] = useState([]);\n\n  const [teams, setTeams] = useState([]);\n\n  const [cookies] = useContext(CookieContext);\n  const [currTeamID, setCurrTeamID] = useContext(CurrentTeamContext);\n\n  // function for retrieving teams from boards\n  const getTeams = (boardArr) => {\n    const duplicatedTeams = [];\n    boardArr.forEach((board) => {\n      const team = { name: board.team_name, id: board.team_id };\n      duplicatedTeams.push(team);\n    });\n    const uniqueTeams = duplicatedTeams.filter(\n      (v, i, a) => a.findIndex((t) => t.id === v.id) === i\n    );\n\n    return uniqueTeams;\n  };\n\n  // fetching the list of boards\n  useEffect(() => {\n    const getBoardsOfFirstTeam = (teamArr, boardArr) => {\n      // add handling for empty teams\n      const boardsOfFirstTeam = boardArr.filter(\n        (board) => board.team_id === teamArr[0].id\n      );\n      return boardsOfFirstTeam;\n    };\n\n    fetch(\"http://localhost:3000/boards\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${cookies.JWT}`,\n      },\n    })\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          // eslint-disable-next-line func-names\n          setIsLoaded(true);\n          setAllBoards(result);\n          const teamArr = getTeams(result);\n          setTeams(teamArr);\n          setBoards(getBoardsOfFirstTeam(teamArr, result));\n          setCurrTeamID(teamArr[0].id);\n        },\n        (err) => {\n          setIsLoaded(true);\n          setError(err);\n        }\n      );\n  }, [cookies.JWT]);\n\n  // fetch error handling\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  }\n  if (!isLoaded) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div className=\"BoardScreen\">\n      <TeamManager\n        teams={teams}\n        setTeams={setTeams}\n        setBoards={setBoards}\n        allBoards={allBoards}\n      />\n      <BoardManager\n        boards={boards}\n        setBoards={setBoards}\n        setAllBoards={setAllBoards}\n      />\n    </div>\n  );\n};\nexport default BoardScreen;\n","/home/alex/trello_clone123/front-end/src/Teams/TeamManager.jsx",[],"/home/alex/trello_clone123/front-end/src/data.js",[],["120","121","122","123","124","125","126"],"/home/alex/trello_clone123/front-end/src/Teams/Team.jsx",["127"],"import { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport DeleteTeamButton from \"./DeleteTeamButton\";\nimport \"./Team.css\";\nimport { CurrentTeamContext } from \"../CurrentTeamContext\";\n\nconst Team = ({ name, id, setTeams, allBoards, setBoards }) => {\n  const [currTeamID, setCurrTeamID] = useContext(CurrentTeamContext);\n\n  const changeTeam = () => {\n    const newBoards = allBoards.filter((board) => board.team_id === id);\n    setBoards(newBoards);\n    setCurrTeamID(id);\n  };\n\n  return (\n    <div className=\"Team\">\n      <button type=\"button\" onClick={changeTeam}>\n        {name}\n      </button>\n      <Link className=\"Members\" to=\"\">\n        🧍\n      </Link>\n      <DeleteTeamButton id={id} />\n    </div>\n  );\n};\n\nTeam.propTypes = {\n  name: PropTypes.string.isRequired,\n  setTeams: PropTypes.func.isRequired,\n  allBoards: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setBoards: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Team;\n","/home/alex/trello_clone123/front-end/src/Teams/DeleteTeamButton.jsx",[],"/home/alex/trello_clone123/front-end/src/CurrentTeamContext.jsx",[],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":4,"column":8,"nodeType":"144","messageId":"145","endLine":4,"endColumn":20},{"ruleId":"142","severity":1,"message":"146","line":9,"column":10,"nodeType":"144","messageId":"145","endLine":9,"endColumn":17},{"ruleId":"147","severity":1,"message":"148","line":12,"column":21,"nodeType":"149","messageId":"150","endLine":12,"endColumn":60},{"ruleId":"147","severity":1,"message":"148","line":20,"column":19,"nodeType":"149","messageId":"150","endLine":23,"endColumn":8},{"ruleId":"147","severity":1,"message":"148","line":11,"column":25,"nodeType":"149","messageId":"150","endLine":11,"endColumn":68},{"ruleId":"151","severity":1,"message":"152","line":24,"column":11,"nodeType":"153","messageId":"150","endLine":24,"endColumn":22},{"ruleId":"147","severity":1,"message":"148","line":10,"column":22,"nodeType":"149","messageId":"150","endLine":10,"endColumn":42},{"ruleId":"142","severity":1,"message":"154","line":20,"column":10,"nodeType":"144","messageId":"145","endLine":20,"endColumn":20},{"ruleId":"155","severity":1,"message":"156","line":68,"column":6,"nodeType":"157","endLine":68,"endColumn":19,"suggestions":"158"},{"ruleId":"128","replacedBy":"159"},{"ruleId":"130","replacedBy":"160"},{"ruleId":"132","replacedBy":"161"},{"ruleId":"134","replacedBy":"162"},{"ruleId":"136","replacedBy":"163"},{"ruleId":"138","replacedBy":"164"},{"ruleId":"140","replacedBy":"165"},{"ruleId":"142","severity":1,"message":"154","line":9,"column":10,"nodeType":"144","messageId":"145","endLine":9,"endColumn":20},"no-native-reassign",["166"],"no-negated-in-lhs",["167"],"lines-around-directive",["168"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-unused-vars","'BoardManager' is defined but never used.","Identifier","unusedVar","'cookies' is assigned a value but never used.","no-alert","Unexpected prompt.","CallExpression","unexpected","no-console","Unexpected console statement.","MemberExpression","'currTeamID' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setCurrTeamID'. Either include it or remove the dependency array.","ArrayExpression",["169"],["166"],["167"],["168"],[],[],[],[],"no-global-assign","no-unsafe-negation","padding-line-between-statements",{"desc":"170","fix":"171"},"Update the dependencies array to be: [cookies.JWT, setCurrTeamID]",{"range":"172","text":"173"},[2102,2115],"[cookies.JWT, setCurrTeamID]"]