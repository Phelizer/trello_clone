[{"/home/alex/trello_clone123/front-end/src/index.jsx":"1","/home/alex/trello_clone123/front-end/src/reportWebVitals.js":"2","/home/alex/trello_clone123/front-end/src/App.jsx":"3","/home/alex/trello_clone123/front-end/src/CookiesContext.jsx":"4","/home/alex/trello_clone123/front-end/src/Authorization/AuthPage.jsx":"5","/home/alex/trello_clone123/front-end/src/Board CRUD component/BoardManager.jsx":"6","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/TaskManager.jsx":"7","/home/alex/trello_clone123/front-end/src/Board CRUD component/Board.jsx":"8","/home/alex/trello_clone123/front-end/src/Board CRUD component/AddBoardButton.jsx":"9","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/AddSectionButton.jsx":"10","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/Section.jsx":"11","/home/alex/trello_clone123/front-end/src/Utils/Utils.jsx":"12","/home/alex/trello_clone123/front-end/src/Board CRUD component/DeleteBoardButton.jsx":"13","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/Task.jsx":"14","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/DeleteSectionButton.jsx":"15","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/AddTaskButton.jsx":"16","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/DeleteTaskButton.jsx":"17","/home/alex/trello_clone123/front-end/src/BoardScreen.jsx":"18","/home/alex/trello_clone123/front-end/src/Teams/TeamManager.jsx":"19","/home/alex/trello_clone123/front-end/src/data.js":"20","/home/alex/trello_clone123/front-end/src/Teams/Team.jsx":"21","/home/alex/trello_clone123/front-end/src/Teams/DeleteTeamButton.jsx":"22","/home/alex/trello_clone123/front-end/src/CurrentTeamContext.jsx":"23","/home/alex/trello_clone123/front-end/src/Authorization/SignUpPage.jsx":"24"},{"size":595,"mtime":1619438355070,"results":"25","hashOfConfig":"26"},{"size":364,"mtime":1619438355070,"results":"27","hashOfConfig":"26"},{"size":965,"mtime":1620478843967,"results":"28","hashOfConfig":"26"},{"size":474,"mtime":1619986644127,"results":"29","hashOfConfig":"26"},{"size":2064,"mtime":1620479024975,"results":"30","hashOfConfig":"26"},{"size":719,"mtime":1620410344149,"results":"31","hashOfConfig":"26"},{"size":3891,"mtime":1620412230871,"results":"32","hashOfConfig":"26"},{"size":780,"mtime":1620133764343,"results":"33","hashOfConfig":"26"},{"size":1771,"mtime":1620133550597,"results":"34","hashOfConfig":"26"},{"size":1296,"mtime":1619438355070,"results":"35","hashOfConfig":"26"},{"size":2406,"mtime":1620412232659,"results":"36","hashOfConfig":"26"},{"size":275,"mtime":1619438355070,"results":"37","hashOfConfig":"26"},{"size":1828,"mtime":1620133659629,"results":"38","hashOfConfig":"26"},{"size":1257,"mtime":1620409491764,"results":"39","hashOfConfig":"26"},{"size":1529,"mtime":1619438355070,"results":"40","hashOfConfig":"26"},{"size":1168,"mtime":1619438355070,"results":"41","hashOfConfig":"26"},{"size":1466,"mtime":1619438355070,"results":"42","hashOfConfig":"26"},{"size":2617,"mtime":1620475922619,"results":"43","hashOfConfig":"26"},{"size":757,"mtime":1619975860789,"results":"44","hashOfConfig":"26"},{"size":556,"mtime":1619708640024,"results":"45","hashOfConfig":"26"},{"size":1035,"mtime":1620117511165,"results":"46","hashOfConfig":"26"},{"size":384,"mtime":1619983266058,"results":"47","hashOfConfig":"26"},{"size":442,"mtime":1619986943829,"results":"48","hashOfConfig":"26"},{"size":2157,"mtime":1620479867483,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"gd81r",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/alex/trello_clone123/front-end/src/index.jsx",[],["105","106","107","108","109","110","111"],"/home/alex/trello_clone123/front-end/src/reportWebVitals.js",[],"/home/alex/trello_clone123/front-end/src/App.jsx",[],"/home/alex/trello_clone123/front-end/src/CookiesContext.jsx",[],"/home/alex/trello_clone123/front-end/src/Authorization/AuthPage.jsx",["112","113","114","115"],"/home/alex/trello_clone123/front-end/src/Board CRUD component/BoardManager.jsx",[],"/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/TaskManager.jsx",[],"/home/alex/trello_clone123/front-end/src/Board CRUD component/Board.jsx",[],"/home/alex/trello_clone123/front-end/src/Board CRUD component/AddBoardButton.jsx",["116","117"],"import PropTypes from \"prop-types\";\nimport \"./AddBoardButton.css\";\nimport { useContext } from \"react\";\nimport { CookieContext } from \"../CookiesContext\";\nimport { CurrentTeamContext } from \"../CurrentTeamContext\";\n\nfunction AddBoardButton({ setBoards, setAllBoards }) {\n  const [cookies] = useContext(CookieContext);\n  const [currTeamID] = useContext(CurrentTeamContext);\n  const handleClick = () => {\n    // to be changed:\n    let boardName = prompt(\"Input board name\", \"New board\");\n\n    // if user cancel the prompt, we cancel the handleClick()\n    if (boardName === null) return;\n\n    // if user tries to input an empty name\n    // we ask to redo the name\n    while (boardName === \"\") {\n      boardName = prompt(\n        \"Board name shouldn't be empty. Please, re-enter the board name\",\n        \"New board\"\n      );\n\n      // if user cancel the prompt, we cancel the handleClick()\n      if (boardName === null) return;\n    }\n\n    const url = \"http://localhost:3000/boards\";\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: boardName,\n        team_id: currTeamID,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${cookies.JWT}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        setAllBoards(result);\n        const newBoards = result.filter(\n          (board) => board.team_id === currTeamID\n        );\n        setBoards(newBoards);\n      });\n  };\n\n  return (\n    <div className=\"AddBoardButton\">\n      <button type=\"button\" onClick={handleClick}>\n        Add board\n      </button>\n    </div>\n  );\n}\n\nAddBoardButton.propTypes = {\n  setBoards: PropTypes.func.isRequired,\n  setAllBoards: PropTypes.func.isRequired,\n};\n\nexport default AddBoardButton;\n","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/AddSectionButton.jsx",["118"],"import PropTypes from \"prop-types\";\n// import \"./AddSectionButton.css\";\nimport { useContext } from \"react\";\nimport { getPath } from \"../Utils/Utils\";\nimport { CookieContext } from \"../CookiesContext\";\n\nfunction AddSectionButton({ setSections }) {\n  const [cookies] = useContext(CookieContext);\n\n  const handleClick = () => {\n    const sectionName = prompt(\"Input section name\", \"New section\");\n\n    // get array of path elements\n    const path = getPath(window);\n\n    const url = `http://localhost:3000/board/${path[0]}`;\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: sectionName,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${cookies.JWT}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        setSections(result);\n      });\n  };\n\n  return (\n    <div className=\"AddSectionButton\">\n      <button type=\"button\" onClick={handleClick}>\n        Add section\n      </button>\n    </div>\n  );\n}\n\nAddSectionButton.propTypes = {\n  /* sections: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.number,\n      position: PropTypes.number,\n    })\n  ).isRequired, */\n  setSections: PropTypes.func.isRequired,\n};\n\nexport default AddSectionButton;\n","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/Section.jsx",[],"/home/alex/trello_clone123/front-end/src/Utils/Utils.jsx",[],"/home/alex/trello_clone123/front-end/src/Board CRUD component/DeleteBoardButton.jsx",["119"],"import PropTypes from \"prop-types\";\nimport \"./DeleteBoardButton.css\";\nimport { useContext } from \"react\";\nimport { CookieContext } from \"../CookiesContext\";\nimport { CurrentTeamContext } from \"../CurrentTeamContext\";\n\nfunction DeleteBoardButton({ boardID, boards, setBoards, setAllBoards }) {\n  const [cookies] = useContext(CookieContext);\n  const [currTeamID] = useContext(CurrentTeamContext);\n\n  const handleClick = () => {\n    const url = `http://localhost:3000/boards/${boardID}`;\n    fetch(url, {\n      method: \"DELETE\",\n      headers: {\n        Authorization: `Bearer ${cookies.JWT}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        if (result.error) {\n          // if there is already no board with that id on server side\n          // than we simply delete it from client's state\n          console.log(\"Error\");\n          const updatedState = boards.filter((board) => board.id !== boardID);\n          setBoards(updatedState);\n          return;\n        }\n        // if everything is ok and there is a board\n        // that we want to remove on server side\n        // than we set new state to BoardManager with\n        // all the rest boards\n        setAllBoards(result);\n        const newBoards = result.filter(\n          (board) => board.team_id === currTeamID\n        );\n        setBoards(newBoards);\n      });\n    // TODO: fetch error handling to be done\n  };\n  return (\n    <div className=\"DeleteBoardButton\">\n      <button type=\"button\" className=\"DeleteButton\" onClick={handleClick}>\n        ×\n      </button>\n    </div>\n  );\n}\n\nDeleteBoardButton.propTypes = {\n  boardID: PropTypes.number.isRequired,\n  boards: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setBoards: PropTypes.func.isRequired,\n  setAllBoards: PropTypes.func.isRequired,\n};\n\nexport default DeleteBoardButton;\n","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/Task.jsx",[],"/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/DeleteSectionButton.jsx",[],"/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/AddTaskButton.jsx",["120"],"import PropTypes from \"prop-types\";\nimport { useContext } from \"react\";\nimport { getPath } from \"../Utils/Utils\";\nimport { CookieContext } from \"../CookiesContext\";\n\nconst AddTaskButton = ({ setTasks, sectionID }) => {\n  const [cookies] = useContext(CookieContext);\n\n  const handleClick = () => {\n    const taskName = prompt(\"Input task\");\n\n    // get array of path elements\n    const path = getPath(window);\n\n    const url = `http://localhost:3000/task/${path[0]}/${sectionID}`;\n\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: taskName,\n        priority: 0,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${cookies.JWT}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        setTasks(result);\n      });\n  };\n\n  return (\n    <div className=\"AddTaskButton\">\n      <button type=\"button\" onClick={handleClick}>\n        Add task\n      </button>\n    </div>\n  );\n};\n\nAddTaskButton.propTypes = {\n  sectionID: PropTypes.number.isRequired,\n  setTasks: PropTypes.func.isRequired,\n  //   setTasks: PropTypes.func.isRequired,\n};\n\nexport default AddTaskButton;\n","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/DeleteTaskButton.jsx",[],"/home/alex/trello_clone123/front-end/src/BoardScreen.jsx",["121","122"],"/home/alex/trello_clone123/front-end/src/Teams/TeamManager.jsx",[],"/home/alex/trello_clone123/front-end/src/data.js",[],["123","124","125","126","127","128","129"],"/home/alex/trello_clone123/front-end/src/Teams/Team.jsx",["130"],"import { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport DeleteTeamButton from \"./DeleteTeamButton\";\nimport \"./Team.css\";\nimport { CurrentTeamContext } from \"../CurrentTeamContext\";\n\nconst Team = ({ name, id, setTeams, allBoards, setBoards }) => {\n  const [currTeamID, setCurrTeamID] = useContext(CurrentTeamContext);\n\n  const changeTeam = () => {\n    const newBoards = allBoards.filter((board) => board.team_id === id);\n    setBoards(newBoards);\n    setCurrTeamID(id);\n  };\n\n  return (\n    <div className=\"Team\">\n      <button type=\"button\" onClick={changeTeam}>\n        {name}\n      </button>\n      <Link className=\"Members\" to=\"\">\n        🧍\n      </Link>\n      <DeleteTeamButton id={id} />\n    </div>\n  );\n};\n\nTeam.propTypes = {\n  name: PropTypes.string.isRequired,\n  setTeams: PropTypes.func.isRequired,\n  allBoards: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setBoards: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Team;\n","/home/alex/trello_clone123/front-end/src/Teams/DeleteTeamButton.jsx",[],"/home/alex/trello_clone123/front-end/src/CurrentTeamContext.jsx",[],"/home/alex/trello_clone123/front-end/src/Authorization/SignUpPage.jsx",["131","132","133","134","135"],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":9,"column":10,"nodeType":"152","messageId":"153","endLine":9,"endColumn":17},{"ruleId":"154","severity":1,"message":"155","line":27,"column":9,"nodeType":"156","messageId":"157","endLine":27,"endColumn":20},{"ruleId":"154","severity":1,"message":"155","line":28,"column":9,"nodeType":"156","messageId":"157","endLine":28,"endColumn":20},{"ruleId":"158","severity":1,"message":"159","line":34,"column":11,"nodeType":"160","messageId":"157","endLine":34,"endColumn":60},{"ruleId":"158","severity":1,"message":"161","line":12,"column":21,"nodeType":"160","messageId":"157","endLine":12,"endColumn":60},{"ruleId":"158","severity":1,"message":"161","line":20,"column":19,"nodeType":"160","messageId":"157","endLine":23,"endColumn":8},{"ruleId":"158","severity":1,"message":"161","line":11,"column":25,"nodeType":"160","messageId":"157","endLine":11,"endColumn":68},{"ruleId":"154","severity":1,"message":"155","line":24,"column":11,"nodeType":"156","messageId":"157","endLine":24,"endColumn":22},{"ruleId":"158","severity":1,"message":"161","line":10,"column":22,"nodeType":"160","messageId":"157","endLine":10,"endColumn":42},{"ruleId":"150","severity":1,"message":"162","line":20,"column":10,"nodeType":"152","messageId":"153","endLine":20,"endColumn":20},{"ruleId":"163","severity":1,"message":"164","line":68,"column":6,"nodeType":"165","endLine":68,"endColumn":19,"suggestions":"166"},{"ruleId":"136","replacedBy":"167"},{"ruleId":"138","replacedBy":"168"},{"ruleId":"140","replacedBy":"169"},{"ruleId":"142","replacedBy":"170"},{"ruleId":"144","replacedBy":"171"},{"ruleId":"146","replacedBy":"172"},{"ruleId":"148","replacedBy":"173"},{"ruleId":"150","severity":1,"message":"162","line":9,"column":10,"nodeType":"152","messageId":"153","endLine":9,"endColumn":20},{"ruleId":"154","severity":1,"message":"155","line":27,"column":7,"nodeType":"156","messageId":"157","endLine":27,"endColumn":18},{"ruleId":"158","severity":1,"message":"159","line":28,"column":31,"nodeType":"160","messageId":"157","endLine":28,"endColumn":54},{"ruleId":"158","severity":1,"message":"159","line":29,"column":29,"nodeType":"160","messageId":"157","endLine":29,"endColumn":52},{"ruleId":"158","severity":1,"message":"159","line":30,"column":26,"nodeType":"160","messageId":"157","endLine":30,"endColumn":46},{"ruleId":"158","severity":1,"message":"159","line":31,"column":29,"nodeType":"160","messageId":"157","endLine":31,"endColumn":66},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"lines-around-directive",["176"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-unused-vars","'cookies' is assigned a value but never used.","Identifier","unusedVar","no-console","Unexpected console statement.","MemberExpression","unexpected","no-alert","Unexpected alert.","CallExpression","Unexpected prompt.","'currTeamID' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setCurrTeamID'. Either include it or remove the dependency array.","ArrayExpression",["177"],["174"],["175"],["176"],[],[],[],[],"no-global-assign","no-unsafe-negation","padding-line-between-statements",{"desc":"178","fix":"179"},"Update the dependencies array to be: [cookies.JWT, setCurrTeamID]",{"range":"180","text":"181"},[2102,2115],"[cookies.JWT, setCurrTeamID]"]