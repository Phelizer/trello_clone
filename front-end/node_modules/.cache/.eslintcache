[{"/home/alex/trello_clone123/front-end/src/index.jsx":"1","/home/alex/trello_clone123/front-end/src/reportWebVitals.js":"2","/home/alex/trello_clone123/front-end/src/App.jsx":"3","/home/alex/trello_clone123/front-end/src/CookiesContext.jsx":"4","/home/alex/trello_clone123/front-end/src/Authorization/AuthPage.jsx":"5","/home/alex/trello_clone123/front-end/src/Board CRUD component/BoardManager.jsx":"6","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/TaskManager.jsx":"7","/home/alex/trello_clone123/front-end/src/Board CRUD component/Board.jsx":"8","/home/alex/trello_clone123/front-end/src/Board CRUD component/AddBoardButton.jsx":"9","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/AddSectionButton.jsx":"10","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/Section.jsx":"11","/home/alex/trello_clone123/front-end/src/Utils/Utils.jsx":"12","/home/alex/trello_clone123/front-end/src/Board CRUD component/DeleteBoardButton.jsx":"13","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/Task.jsx":"14","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/DeleteSectionButton.jsx":"15","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/AddTaskButton.jsx":"16","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/DeleteTaskButton.jsx":"17","/home/alex/trello_clone123/front-end/src/BoardScreen.jsx":"18","/home/alex/trello_clone123/front-end/src/Teams/TeamManager.jsx":"19","/home/alex/trello_clone123/front-end/src/data.js":"20","/home/alex/trello_clone123/front-end/src/Teams/Team.jsx":"21","/home/alex/trello_clone123/front-end/src/Teams/DeleteTeamButton.jsx":"22"},{"size":595,"mtime":1619438355070,"results":"23","hashOfConfig":"24"},{"size":364,"mtime":1619438355070,"results":"25","hashOfConfig":"24"},{"size":773,"mtime":1619709056016,"results":"26","hashOfConfig":"24"},{"size":474,"mtime":1619438355070,"results":"27","hashOfConfig":"24"},{"size":1673,"mtime":1619438355070,"results":"28","hashOfConfig":"24"},{"size":1502,"mtime":1619620159899,"results":"29","hashOfConfig":"24"},{"size":3891,"mtime":1619438355070,"results":"30","hashOfConfig":"24"},{"size":689,"mtime":1619612473136,"results":"31","hashOfConfig":"24"},{"size":1501,"mtime":1619438355070,"results":"32","hashOfConfig":"24"},{"size":1296,"mtime":1619438355070,"results":"33","hashOfConfig":"24"},{"size":2406,"mtime":1619438355070,"results":"34","hashOfConfig":"24"},{"size":275,"mtime":1619438355070,"results":"35","hashOfConfig":"24"},{"size":1489,"mtime":1619619548746,"results":"36","hashOfConfig":"24"},{"size":1257,"mtime":1619438355070,"results":"37","hashOfConfig":"24"},{"size":1529,"mtime":1619438355070,"results":"38","hashOfConfig":"24"},{"size":1168,"mtime":1619438355070,"results":"39","hashOfConfig":"24"},{"size":1466,"mtime":1619438355070,"results":"40","hashOfConfig":"24"},{"size":254,"mtime":1619709033210,"results":"41","hashOfConfig":"24"},{"size":416,"mtime":1619709396359,"results":"42","hashOfConfig":"24"},{"size":556,"mtime":1619708640024,"results":"43","hashOfConfig":"24"},{"size":527,"mtime":1619709751804,"results":"44","hashOfConfig":"24"},{"size":384,"mtime":1619708225123,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"gd81r",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/alex/trello_clone123/front-end/src/index.jsx",[],["95","96","97","98","99","100","101"],"/home/alex/trello_clone123/front-end/src/reportWebVitals.js",[],"/home/alex/trello_clone123/front-end/src/App.jsx",["102"],"/home/alex/trello_clone123/front-end/src/CookiesContext.jsx",[],"/home/alex/trello_clone123/front-end/src/Authorization/AuthPage.jsx",["103"],"import { useState, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { CookieContext } from \"../CookiesContext\";\n\nconst AuthPage = () => {\n  const [currLogin, setCurrLogin] = useState(null);\n  const [currPassword, setCurrPassword] = useState(null);\n\n  const [cookies, setCookie] = useContext(CookieContext);\n  const history = useHistory();\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    const url = \"http://localhost:3000/auth/login\";\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        username: currLogin,\n        password: currPassword,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        const JWT = result.access_token;\n        setCookie(\"JWT\", JWT, { path: \"/\" });\n        history.push(\"/boards\");\n      });\n  };\n  const loginChangeHandler = (e) => {\n    setCurrLogin(e.target.value);\n  };\n  const passwordChangeHandler = (e) => {\n    setCurrPassword(e.target.value);\n  };\n  return (\n    <div className=\"AuthPage\">\n      <form onSubmit={submitHandler}>\n        <label htmlFor=\"login\">\n          Login:\n          <input\n            type=\"text\"\n            name=\"login\"\n            id=\"login\"\n            onChange={loginChangeHandler}\n          />\n        </label>\n        <label htmlFor=\"password\">\n          Password:\n          <input\n            type=\"text\"\n            name=\"password\"\n            id=\"password\"\n            onChange={passwordChangeHandler}\n          />\n        </label>\n        <input type=\"submit\" value=\"Sign in\" />\n      </form>\n    </div>\n  );\n};\n\nexport default AuthPage;\n","/home/alex/trello_clone123/front-end/src/Board CRUD component/BoardManager.jsx",[],"/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/TaskManager.jsx",[],"/home/alex/trello_clone123/front-end/src/Board CRUD component/Board.jsx",[],"/home/alex/trello_clone123/front-end/src/Board CRUD component/AddBoardButton.jsx",["104","105"],"import PropTypes from \"prop-types\";\nimport \"./AddBoardButton.css\";\nimport { useContext } from \"react\";\nimport { CookieContext } from \"../CookiesContext\";\n\nfunction AddBoardButton({ boards, setBoards }) {\n  const [cookies] = useContext(CookieContext);\n  const handleClick = () => {\n    // to be changed:\n    let boardName = prompt(\"Input board name\", \"New board\");\n\n    // if user cancel the prompt, we cancel the handleClick()\n    if (boardName === null) return;\n\n    // if user tries to input an empty name\n    // we ask to redo the name\n    while (boardName === \"\") {\n      boardName = prompt(\n        \"Board name shouldn't be empty. Please, re-enter the board name\",\n        \"New board\"\n      );\n\n      // if user cancel the prompt, we cancel the handleClick()\n      if (boardName === null) return;\n    }\n\n    const url = \"http://localhost:3000/boards\";\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: boardName,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${cookies.JWT}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        setBoards(result);\n      });\n  };\n\n  return (\n    <div className=\"AddBoardButton\">\n      <button type=\"button\" onClick={handleClick}>\n        Add board\n      </button>\n    </div>\n  );\n}\n\nAddBoardButton.propTypes = {\n  boards: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setBoards: PropTypes.func.isRequired,\n};\n\nexport default AddBoardButton;\n","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/AddSectionButton.jsx",["106"],"import PropTypes from \"prop-types\";\n// import \"./AddSectionButton.css\";\nimport { useContext } from \"react\";\nimport { getPath } from \"../Utils/Utils\";\nimport { CookieContext } from \"../CookiesContext\";\n\nfunction AddSectionButton({ setSections }) {\n  const [cookies] = useContext(CookieContext);\n\n  const handleClick = () => {\n    const sectionName = prompt(\"Input section name\", \"New section\");\n\n    // get array of path elements\n    const path = getPath(window);\n\n    const url = `http://localhost:3000/board/${path[0]}`;\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: sectionName,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${cookies.JWT}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        setSections(result);\n      });\n  };\n\n  return (\n    <div className=\"AddSectionButton\">\n      <button type=\"button\" onClick={handleClick}>\n        Add section\n      </button>\n    </div>\n  );\n}\n\nAddSectionButton.propTypes = {\n  /* sections: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.number,\n      position: PropTypes.number,\n    })\n  ).isRequired, */\n  setSections: PropTypes.func.isRequired,\n};\n\nexport default AddSectionButton;\n","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/Section.jsx",[],"/home/alex/trello_clone123/front-end/src/Utils/Utils.jsx",[],"/home/alex/trello_clone123/front-end/src/Board CRUD component/DeleteBoardButton.jsx",[],"/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/Task.jsx",[],"/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/DeleteSectionButton.jsx",[],"/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/AddTaskButton.jsx",["107"],"import PropTypes from \"prop-types\";\nimport { useContext } from \"react\";\nimport { getPath } from \"../Utils/Utils\";\nimport { CookieContext } from \"../CookiesContext\";\n\nconst AddTaskButton = ({ setTasks, sectionID }) => {\n  const [cookies] = useContext(CookieContext);\n\n  const handleClick = () => {\n    const taskName = prompt(\"Input task\");\n\n    // get array of path elements\n    const path = getPath(window);\n\n    const url = `http://localhost:3000/task/${path[0]}/${sectionID}`;\n\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: taskName,\n        priority: 0,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${cookies.JWT}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        setTasks(result);\n      });\n  };\n\n  return (\n    <div className=\"AddTaskButton\">\n      <button type=\"button\" onClick={handleClick}>\n        Add task\n      </button>\n    </div>\n  );\n};\n\nAddTaskButton.propTypes = {\n  sectionID: PropTypes.number.isRequired,\n  setTasks: PropTypes.func.isRequired,\n  //   setTasks: PropTypes.func.isRequired,\n};\n\nexport default AddTaskButton;\n","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/DeleteTaskButton.jsx",[],"/home/alex/trello_clone123/front-end/src/BoardScreen.jsx",[],"/home/alex/trello_clone123/front-end/src/Teams/TeamManager.jsx",["108"],"/home/alex/trello_clone123/front-end/src/data.js",[],"/home/alex/trello_clone123/front-end/src/Teams/Team.jsx",[],"/home/alex/trello_clone123/front-end/src/Teams/DeleteTeamButton.jsx",[],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":4,"column":8,"nodeType":"125","messageId":"126","endLine":4,"endColumn":20},{"ruleId":"123","severity":1,"message":"127","line":9,"column":10,"nodeType":"125","messageId":"126","endLine":9,"endColumn":17},{"ruleId":"128","severity":1,"message":"129","line":10,"column":21,"nodeType":"130","messageId":"131","endLine":10,"endColumn":60},{"ruleId":"128","severity":1,"message":"129","line":18,"column":19,"nodeType":"130","messageId":"131","endLine":21,"endColumn":8},{"ruleId":"128","severity":1,"message":"129","line":11,"column":25,"nodeType":"130","messageId":"131","endLine":11,"endColumn":68},{"ruleId":"128","severity":1,"message":"129","line":10,"column":22,"nodeType":"130","messageId":"131","endLine":10,"endColumn":42},{"ruleId":"123","severity":1,"message":"132","line":7,"column":17,"nodeType":"125","messageId":"126","endLine":7,"endColumn":25},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],"lines-around-directive",["135"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-unused-vars","'BoardManager' is defined but never used.","Identifier","unusedVar","'cookies' is assigned a value but never used.","no-alert","Unexpected prompt.","CallExpression","unexpected","'setTeams' is assigned a value but never used.","no-global-assign","no-unsafe-negation","padding-line-between-statements"]