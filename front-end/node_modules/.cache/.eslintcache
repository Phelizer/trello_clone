[{"/home/alex/trello_clone123/front-end/src/index.jsx":"1","/home/alex/trello_clone123/front-end/src/reportWebVitals.js":"2","/home/alex/trello_clone123/front-end/src/App.jsx":"3","/home/alex/trello_clone123/front-end/src/CookiesContext.jsx":"4","/home/alex/trello_clone123/front-end/src/Authorization/AuthPage.jsx":"5","/home/alex/trello_clone123/front-end/src/Board CRUD component/BoardManager.jsx":"6","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/TaskManager.jsx":"7","/home/alex/trello_clone123/front-end/src/Board CRUD component/Board.jsx":"8","/home/alex/trello_clone123/front-end/src/Board CRUD component/AddBoardButton.jsx":"9","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/AddSectionButton.jsx":"10","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/Section.jsx":"11","/home/alex/trello_clone123/front-end/src/Utils/Utils.jsx":"12","/home/alex/trello_clone123/front-end/src/Board CRUD component/DeleteBoardButton.jsx":"13","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/Task.jsx":"14","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/DeleteSectionButton.jsx":"15","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/AddTaskButton.jsx":"16","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/DeleteTaskButton.jsx":"17","/home/alex/trello_clone123/front-end/src/BoardScreen.jsx":"18","/home/alex/trello_clone123/front-end/src/Teams/TeamManager.jsx":"19","/home/alex/trello_clone123/front-end/src/data.js":"20","/home/alex/trello_clone123/front-end/src/Teams/Team.jsx":"21","/home/alex/trello_clone123/front-end/src/Teams/DeleteTeamButton.jsx":"22","/home/alex/trello_clone123/front-end/src/CurrentTeamContext.jsx":"23"},{"size":595,"mtime":1619438355070,"results":"24","hashOfConfig":"25"},{"size":364,"mtime":1619438355070,"results":"26","hashOfConfig":"25"},{"size":908,"mtime":1619986999471,"results":"27","hashOfConfig":"25"},{"size":474,"mtime":1619986644127,"results":"28","hashOfConfig":"25"},{"size":1673,"mtime":1619987199816,"results":"29","hashOfConfig":"25"},{"size":614,"mtime":1619947620928,"results":"30","hashOfConfig":"25"},{"size":3891,"mtime":1619438355070,"results":"31","hashOfConfig":"25"},{"size":689,"mtime":1619612473136,"results":"32","hashOfConfig":"25"},{"size":1645,"mtime":1619987226139,"results":"33","hashOfConfig":"25"},{"size":1296,"mtime":1619438355070,"results":"34","hashOfConfig":"25"},{"size":2406,"mtime":1619438355070,"results":"35","hashOfConfig":"25"},{"size":275,"mtime":1619438355070,"results":"36","hashOfConfig":"25"},{"size":1489,"mtime":1619947540459,"results":"37","hashOfConfig":"25"},{"size":1257,"mtime":1619438355070,"results":"38","hashOfConfig":"25"},{"size":1529,"mtime":1619438355070,"results":"39","hashOfConfig":"25"},{"size":1168,"mtime":1619438355070,"results":"40","hashOfConfig":"25"},{"size":1466,"mtime":1619438355070,"results":"41","hashOfConfig":"25"},{"size":2574,"mtime":1620050766622,"results":"42","hashOfConfig":"25"},{"size":757,"mtime":1619975860789,"results":"43","hashOfConfig":"25"},{"size":556,"mtime":1619708640024,"results":"44","hashOfConfig":"25"},{"size":1035,"mtime":1619987933053,"results":"45","hashOfConfig":"25"},{"size":384,"mtime":1619983266058,"results":"46","hashOfConfig":"25"},{"size":442,"mtime":1619986943829,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"gd81r",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"/home/alex/trello_clone123/front-end/src/index.jsx",[],["102","103","104","105","106","107","108"],"/home/alex/trello_clone123/front-end/src/reportWebVitals.js",[],"/home/alex/trello_clone123/front-end/src/App.jsx",["109"],"import \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport AuthPage from \"./Authorization/AuthPage\";\nimport BoardManager from \"./Board CRUD component/BoardManager\";\nimport TaskManager from \"./Sections and cards CRUD component/TaskManager\";\nimport { CookieProvider } from \"./CookiesContext\";\nimport BoardScreen from \"./BoardScreen\";\nimport { CurrentTeamProvider } from \"./CurrentTeamContext\";\n\nfunction App() {\n  return (\n    <CurrentTeamProvider>\n      <CookieProvider>\n        <Router>\n          <div className=\"App\">\n            <Switch>\n              <Route path=\"/\" exact component={AuthPage} />\n              <Route path=\"/boards\" exact component={BoardScreen} />\n              <Route path=\"/:id\" component={TaskManager} />\n            </Switch>\n          </div>\n        </Router>\n      </CookieProvider>\n    </CurrentTeamProvider>\n  );\n}\n\nexport default App;\n","/home/alex/trello_clone123/front-end/src/CookiesContext.jsx",[],"/home/alex/trello_clone123/front-end/src/Authorization/AuthPage.jsx",["110"],"import { useState, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { CookieContext } from \"../CookiesContext\";\n\nconst AuthPage = () => {\n  const [currLogin, setCurrLogin] = useState(null);\n  const [currPassword, setCurrPassword] = useState(null);\n\n  const [cookies, setCookie] = useContext(CookieContext);\n  const history = useHistory();\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    const url = \"http://localhost:3000/auth/login\";\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        username: currLogin,\n        password: currPassword,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        const JWT = result.access_token;\n        setCookie(\"JWT\", JWT, { path: \"/\" });\n        history.push(\"/boards\");\n      });\n  };\n  const loginChangeHandler = (e) => {\n    setCurrLogin(e.target.value);\n  };\n  const passwordChangeHandler = (e) => {\n    setCurrPassword(e.target.value);\n  };\n  return (\n    <div className=\"AuthPage\">\n      <form onSubmit={submitHandler}>\n        <label htmlFor=\"login\">\n          Login:\n          <input\n            type=\"text\"\n            name=\"login\"\n            id=\"login\"\n            onChange={loginChangeHandler}\n          />\n        </label>\n        <label htmlFor=\"password\">\n          Password:\n          <input\n            type=\"text\"\n            name=\"password\"\n            id=\"password\"\n            onChange={passwordChangeHandler}\n          />\n        </label>\n        <input type=\"submit\" value=\"Sign in\" />\n      </form>\n    </div>\n  );\n};\n\nexport default AuthPage;\n","/home/alex/trello_clone123/front-end/src/Board CRUD component/BoardManager.jsx",[],"/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/TaskManager.jsx",[],"/home/alex/trello_clone123/front-end/src/Board CRUD component/Board.jsx",[],"/home/alex/trello_clone123/front-end/src/Board CRUD component/AddBoardButton.jsx",["111","112"],"import PropTypes from \"prop-types\";\nimport \"./AddBoardButton.css\";\nimport { useContext } from \"react\";\nimport { CookieContext } from \"../CookiesContext\";\nimport { CurrentTeamContext } from \"../CurrentTeamContext\";\n\nfunction AddBoardButton({ boards, setBoards }) {\n  const [cookies] = useContext(CookieContext);\n  const [currTeamID] = useContext(CurrentTeamContext);\n  const handleClick = () => {\n    // to be changed:\n    let boardName = prompt(\"Input board name\", \"New board\");\n\n    // if user cancel the prompt, we cancel the handleClick()\n    if (boardName === null) return;\n\n    // if user tries to input an empty name\n    // we ask to redo the name\n    while (boardName === \"\") {\n      boardName = prompt(\n        \"Board name shouldn't be empty. Please, re-enter the board name\",\n        \"New board\"\n      );\n\n      // if user cancel the prompt, we cancel the handleClick()\n      if (boardName === null) return;\n    }\n\n    const url = \"http://localhost:3000/boards\";\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: boardName,\n        team_id: currTeamID,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${cookies.JWT}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        setBoards(result);\n      });\n  };\n\n  return (\n    <div className=\"AddBoardButton\">\n      <button type=\"button\" onClick={handleClick}>\n        Add board\n      </button>\n    </div>\n  );\n}\n\nAddBoardButton.propTypes = {\n  boards: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setBoards: PropTypes.func.isRequired,\n};\n\nexport default AddBoardButton;\n","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/AddSectionButton.jsx",["113"],"import PropTypes from \"prop-types\";\n// import \"./AddSectionButton.css\";\nimport { useContext } from \"react\";\nimport { getPath } from \"../Utils/Utils\";\nimport { CookieContext } from \"../CookiesContext\";\n\nfunction AddSectionButton({ setSections }) {\n  const [cookies] = useContext(CookieContext);\n\n  const handleClick = () => {\n    const sectionName = prompt(\"Input section name\", \"New section\");\n\n    // get array of path elements\n    const path = getPath(window);\n\n    const url = `http://localhost:3000/board/${path[0]}`;\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: sectionName,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${cookies.JWT}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        setSections(result);\n      });\n  };\n\n  return (\n    <div className=\"AddSectionButton\">\n      <button type=\"button\" onClick={handleClick}>\n        Add section\n      </button>\n    </div>\n  );\n}\n\nAddSectionButton.propTypes = {\n  /* sections: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.number,\n      position: PropTypes.number,\n    })\n  ).isRequired, */\n  setSections: PropTypes.func.isRequired,\n};\n\nexport default AddSectionButton;\n","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/Section.jsx",[],"/home/alex/trello_clone123/front-end/src/Utils/Utils.jsx",[],"/home/alex/trello_clone123/front-end/src/Board CRUD component/DeleteBoardButton.jsx",[],"/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/Task.jsx",[],"/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/DeleteSectionButton.jsx",[],"/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/AddTaskButton.jsx",["114"],"import PropTypes from \"prop-types\";\nimport { useContext } from \"react\";\nimport { getPath } from \"../Utils/Utils\";\nimport { CookieContext } from \"../CookiesContext\";\n\nconst AddTaskButton = ({ setTasks, sectionID }) => {\n  const [cookies] = useContext(CookieContext);\n\n  const handleClick = () => {\n    const taskName = prompt(\"Input task\");\n\n    // get array of path elements\n    const path = getPath(window);\n\n    const url = `http://localhost:3000/task/${path[0]}/${sectionID}`;\n\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify({\n        name: taskName,\n        priority: 0,\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${cookies.JWT}`,\n      },\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        setTasks(result);\n      });\n  };\n\n  return (\n    <div className=\"AddTaskButton\">\n      <button type=\"button\" onClick={handleClick}>\n        Add task\n      </button>\n    </div>\n  );\n};\n\nAddTaskButton.propTypes = {\n  sectionID: PropTypes.number.isRequired,\n  setTasks: PropTypes.func.isRequired,\n  //   setTasks: PropTypes.func.isRequired,\n};\n\nexport default AddTaskButton;\n","/home/alex/trello_clone123/front-end/src/Sections and cards CRUD component/DeleteTaskButton.jsx",[],"/home/alex/trello_clone123/front-end/src/BoardScreen.jsx",["115"],"/home/alex/trello_clone123/front-end/src/Teams/TeamManager.jsx",[],"/home/alex/trello_clone123/front-end/src/data.js",[],["116","117","118","119","120","121","122"],"/home/alex/trello_clone123/front-end/src/Teams/Team.jsx",["123"],"import { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\nimport DeleteTeamButton from \"./DeleteTeamButton\";\nimport \"./Team.css\";\nimport { CurrentTeamContext } from \"../CurrentTeamContext\";\n\nconst Team = ({ name, id, setTeams, allBoards, setBoards }) => {\n  const [currTeamID, setCurrTeamID] = useContext(CurrentTeamContext);\n\n  const changeTeam = () => {\n    const newBoards = allBoards.filter((board) => board.team_id === id);\n    setBoards(newBoards);\n    setCurrTeamID(id);\n  };\n\n  return (\n    <div className=\"Team\">\n      <button type=\"button\" onClick={changeTeam}>\n        {name}\n      </button>\n      <Link className=\"Members\" to=\"\">\n        🧍\n      </Link>\n      <DeleteTeamButton id={id} />\n    </div>\n  );\n};\n\nTeam.propTypes = {\n  name: PropTypes.string.isRequired,\n  setTeams: PropTypes.func.isRequired,\n  allBoards: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setBoards: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default Team;\n","/home/alex/trello_clone123/front-end/src/Teams/DeleteTeamButton.jsx",[],"/home/alex/trello_clone123/front-end/src/CurrentTeamContext.jsx",[],{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":4,"column":8,"nodeType":"140","messageId":"141","endLine":4,"endColumn":20},{"ruleId":"138","severity":1,"message":"142","line":9,"column":10,"nodeType":"140","messageId":"141","endLine":9,"endColumn":17},{"ruleId":"143","severity":1,"message":"144","line":12,"column":21,"nodeType":"145","messageId":"146","endLine":12,"endColumn":60},{"ruleId":"143","severity":1,"message":"144","line":20,"column":19,"nodeType":"145","messageId":"146","endLine":23,"endColumn":8},{"ruleId":"143","severity":1,"message":"144","line":11,"column":25,"nodeType":"145","messageId":"146","endLine":11,"endColumn":68},{"ruleId":"143","severity":1,"message":"144","line":10,"column":22,"nodeType":"145","messageId":"146","endLine":10,"endColumn":42},{"ruleId":"138","severity":1,"message":"147","line":20,"column":10,"nodeType":"140","messageId":"141","endLine":20,"endColumn":20},{"ruleId":"124","replacedBy":"148"},{"ruleId":"126","replacedBy":"149"},{"ruleId":"128","replacedBy":"150"},{"ruleId":"130","replacedBy":"151"},{"ruleId":"132","replacedBy":"152"},{"ruleId":"134","replacedBy":"153"},{"ruleId":"136","replacedBy":"154"},{"ruleId":"138","severity":1,"message":"147","line":9,"column":10,"nodeType":"140","messageId":"141","endLine":9,"endColumn":20},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"lines-around-directive",["157"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-unused-vars","'BoardManager' is defined but never used.","Identifier","unusedVar","'cookies' is assigned a value but never used.","no-alert","Unexpected prompt.","CallExpression","unexpected","'currTeamID' is assigned a value but never used.",["155"],["156"],["157"],[],[],[],[],"no-global-assign","no-unsafe-negation","padding-line-between-statements"]